import HttpStatusCodes from "./constants/HttpStatusCodes";

/**generic type to represent hashtag and location response */
export type HashTagAndLocationResponseParams = {
    /**name of the hashtag or location */
    name: string;
    /**number of posts created using this location or hashtag */
    noOfPosts: number;
};

/**response type  to represent an account */
export type AccountResponseParams = {
    /**unique id generated by server */
    id: string;
    /**unique username provided by the account holder */
    username: string;
    /**link to the profile picture */
    profilePictureUri: string;
    /**fullname of the account holder */
    fullname?: string;
    /**true if the requesting account follows the target account */
    isFollowing?: boolean;
    /**true if the  target account follows the requesting account*/
    isFollower?: boolean;
    /**holds additional information about the following user's personalisation */
    followingInfo?: {
        /**true if the requesting account has added the target account to favourite */
        isFavourite: boolean;
        muteStatus: {
            /**true if memories has been muted */
            memory: boolean;
            /**true if posts has been muted */
            post: boolean;
        };
    };
    /**true if the target account has sent a follow request to this account*/
    hasRequested?: boolean;
    // /**a text message that states why the account is suggested */
    // suggestionText?: string;
    /**total number of followers of this account */
    noOfFollowers?: number;
    /**total number of posts uploaded from this account */
    noOfPosts?: number;
    /**uris of the most recent post thumbnails */
    topPosts?: string[];
    /**true if the account is private */
    isPrivate?: boolean;
    /**memory details */
    memoryInfo?: {
        /**toatl number of memories uploaded in last 24 hours */
        noOfAvailableMemories: number;
        /**true if any of the memories uploaded in last 24 hours is unseen by the requesting account */
        hasUnseenMemories: boolean;
        /**all the memories uploaded in last 24 hours */
        memories: MemoryResponseParams[];
    };
};

/**type to represent comment replies from posts */
export type ReplyResponseParams = {
  /**unique id generated by server */
  id: string;
  /**text content */
  content: string;
  /**upload timestamp of the reply */
  timestamp: number;
  /**account, that uploaded the reply
   * include following optional params - memoryInfo
   */
  author: AccountResponseParams;
  /**total number of likes in the reply */
  noOfLikes: number;
  /**true if the requesting account liked the reply */
  isLiked: boolean;
};

/**type to represent comments of posts */
export type CommentResponseParams = {
    /**reply information about the comment*/
    replies: {
        /**total number of replies in the comment */
        noOfReplies: number;
        /**a reply of this comment requested by the requesting account */
        requestedReply?: ReplyResponseParams;
    };
    /**true if the author of the post has pinned the comment */
    isPinned: boolean;
} & ReplyResponseParams;

/**type that represents a photo*/
export type PhotoResponseParams = {
    /**uri link of the photo */
    uri: string;
    previewUri: string;
    /**aspect ratio of the original and its preview */
    aspectRatio: number;
};

/**type that represents a video */
export type VideoResponseParams = {
    /**duration of the video in milliseconds */
    duration: number;
    /**true if no audio stream is available in the video */
    isMuted: boolean;
} & PhotoResponseParams;

/**type to represent an audio */
export type AudioResponseParams = {
  /**unique id generated by server */
  id: string;
  /**title of the audio provided by the artist */
  title: string;
  /**name of the artist */
  artistName: string;
  /**account information of the artist if available
   * include only required parameters
   */
  artistAccount?: AccountResponseParams;
  /**uri of the poster of the audio */
  posterUri: string;
  /**uri to play the audio */
  mediaUri?: string;
  /**duration of the audio */
  duration?: number;
  /**section of the audio to play as preview */
  previewSection?: {
    /**time to start the preview from */
    from: number;
    /**time to stop the preview */
    to: number;
  };
  /**total number of photos and videos created with this audio */
  noOfPhotosAndMoments?: number;
  /**true if the audio is added to favourite by the requesting account */
  isSaved?: boolean;
};

export type PostType = "photo" | "video" | "moments";

export type AccountSuggestionType = "new" | "nearby" | "popular" | "foryou";

/**
 * type definition to represent a post
 */
export type PostResponseParams = {
  /**unique id generated by server */
  id: string;
  /**media data in this post */
  postType: PostType;
  /**upload timestamp of the post */
  timestamp: number;
  /**true if the post is edited  by the author*/
  isEdited: boolean;
  /**account that uploaded the post
   * include following optional paramaters - memoryInfo, followingInfo, isPrivate, hasRequested, isFollowing
   */
  author: AccountResponseParams;
  /**name of the location added to the post */
  location?: string;
  /**caption text added to the post */
  caption?: string;
  /**true if the requesting account has saved the post */
  isSaved: boolean;
  /**true if the requesting account has liked the post */
  isLiked: boolean;
  /**advanced options related to post metadata that is only mutable by author */
  advancedOptions: {
    /**true if the author has pinned the post to account grids */
    isPinned: boolean;
    /**true if comments is disabled on this post */
    commentsDisabled: boolean;
    /**true if number of likes and views are hidden for this post */
    hideLikesAndViewsCount: boolean;
    /**true if this post cannot be shared to memories */
    shareToMemoryDisabled: boolean;
    /**true if link sharing of this post is disabled */
    shareLinkDisabled: boolean;
  };
  /**metadata about the likes and views of the post */
  likesAndViews?: {
    /**total no of likes in the post */
    noOfLikes: number;
    /**total no of views in the post, only available to video posts */
    noOfViews: number;
    /**couple of account informations
     * only include required params
     */
    likesFromFollowingAccounts?: AccountResponseParams[];
  };
  /**metadata about the comments on this post */
  comments?: {
    /**total number of comments in the post */
    noOfComments: number;
    /**couple of recent comments */
    topComments: CommentResponseParams[];
  };
  /**video data of the post, if available */
  video?: {
    momentParams?: {
      /**information about the orginal post */
      remixedWith?: {
        /**id of the original post */
        id: string;
        /**username of the author of the original post */
        username: string;
      };
      /**true if this video can be remixed, always false in case its a remixed video */
      remixEnabled: boolean;
    };
  } & VideoResponseParams;
  /**photo data of the post, if available */
  photos?: ({
    stickyMentionPositions?: {
      id: string;
      x: number;
      y: number;
    }[];
  } & PhotoResponseParams)[];
  /**audio related metadata used in the photo or video */
  audio?: {
    isAvailable: boolean;
    usedSection?: {
      /**statrting timestamp */
      from: number;
      /**stoping timestamp */
      to: number;
    };
    clipLengths?: number[];
    params?: AudioResponseParams;
  };
  /**mentions in the posts
   * include following params - fullname, memoryInfo, isFollowing
   */
  mentions?: AccountResponseParams[];
};

/**parameters needed to represent a page request*/
export type PageRequestParams = {
    /**timestamp upperbound of the page */
    timestamp: number;
    /**starting index of the page */
    offset: number;
    /**length of the page */
    length: number;
};

/**a parameterized version of page request body to add custom parameters to the request*/
export type PageRequestBodyParams<T extends {} = {}> =
  Partial<PageRequestParams> & T;

/**parameterized page response to represent any king of page data*/
export type PageResponseParams<T extends {}, U extends {} = {}> = {
  /**target list data of specified type*/
  list: T[];
  /**metadata associated with the page(i.e request body params, uri params) */
  meta: {
    /**true if there are more pages available */
    hasMorePages: boolean;
  } & U &
    PageRequestParams;
};

/**a general type to represent any kind of error */
export type ErrorResponseParams = {
    /**http status code associated with the response */
    statusCode: HttpStatusCodes;
    /**error code associated with the data */
    errorCode: ErrorCodes;
    /**human readable message to represent the error*/
    message: string;
    /**reason for the error */
    reason: string;
};

/**a general type to represent any kind of response body */
export type ResponseBodyParams<T> = {
    /**desired data if the reuqest is successfull*/
    data?: T;
    /**error if the request was unsuccessfull*/
    error?: ErrorResponseParams;
};

/**a type representing a complete paginated post response body*/
export type PaginatedPostResponseBodyParams<T extends {} = {}> =
  ResponseBodyParams<
    {
      /**optional suggested account */
      accountSuggestions?: {
        type: AccountSuggestionType;
        suggestions: AccountResponseParams[];
      };
      /**optional suggested audio*/
      audioSuggestion?: {
        /**audio information */
        audio: AudioResponseParams;
        /**a video uri created with this audio */
        mediaUri: string;
      };
    } & PageResponseParams<PostResponseParams, T>
  >;

/**a type representing a complete paginated account response body */
export type PaginatedAccountResponseBodyParams<T extends {} = {}> =
  ResponseBodyParams<PageResponseParams<AccountResponseParams, T>>;

/**type representing a memory*/
export type MemoryResponseParams = {
  /**unique id of the memory */
  id: string;
  /**created timestamp*/
  timestamp: number;
  /**orginal video data*/
  video: VideoResponseParams;
  /**audio related metadata used in the video */
  audio?: {
    isAvailable: boolean;
    usedSection?: {
      /**statrting timestamp */
      from: number;
      /**stoping timestamp */
      to: number;
    };
    clipLengths?: number[];
    params?: AudioResponseParams;
  };
  /**captions written in the story */
  captions?: {
    /**text content of the caption */
    content: string;
    /**animation used when the caption is mounted */
    animation?: {
      /**name of the animation */
      name: "fade" | "bounce" | "zoom" | "rotate" | "slide";
      /**type of the animation */
      type: string;
    };
    /**captions written in the story */
    captions?: {
        /**text content of the caption */
        content: string;
        /**animation used when the caption is mounted */
        animation?: {
            /**name of the animation */
            name: "fade" | "bounce" | "zoom" | "rotate" | "slide";
            /**type of the animation */
            type: string;
        };
        /**colors used in foreground and background*/
        color: {
            /**type of background used */
            background:
                | "semi-transparent-background"
                | "transparent-background"
                | "white-background"
                | "colored-background";
            /**hexcode color used in foreground or background*/
            value: string;
        };
        /**transform properties used to layout the caption*/
        transform: {
            /**rotation in deg*/
            rotation: number;
            /**zoom sclae */
            scale: number;
            /**absolute position coordinates*/
            position: {
                /**x coordinates*/
                x: number;
                /**y coordinates*/
                y: number;
            };
        };
    }[];
};

/**type representing the complete home feed response body*/
export type HomeFeedResponseBodyParams = ResponseBodyParams<{
  /**first page of accounts/memories
   * include following optional params - memoryInfo, followingInfo
   */
  memoryPage: PageResponseParams<AccountResponseParams>;
  /**first page of posts from following accounts */
  postPage: PageResponseParams<PostResponseParams>;
  /**recently cearched items by the requesting account */
  searchHistory: SearchResponseParams[];
}>;

/**a utility type to represent search request body*/
export type SearchRequestBodyParams = {
    /**query string to search for*/
    query: string;
};

/**request body for paginated search query*/
export type SearchRequestPageBodyParams =
    PageRequestBodyParams<SearchRequestBodyParams>;

/**all the possible search result params*/
export type SearchResponseParams = Partial<{
  /**popular keywords to search for */
  keyword: string;
  /**hashtag search result */
  hashtag: HashTagAndLocationResponseParams;
  /**location search result */
  location: HashTagAndLocationResponseParams;
  /**audio search result */
  audio: AudioResponseParams;
  /**account search result
   * include only required parameters
   */
  account: AccountResponseParams;
}>;

export type SearchResponseBodyParams = ResponseBodyParams<
  {
    results: SearchResponseParams[];
  } & SearchRequestBodyParams
>;

export type PaginatedPostSearchResponseBodyParams =
    PaginatedPostResponseBodyParams<SearchRequestBodyParams>;

export type PostQueryParams = {
    postId: string;
};

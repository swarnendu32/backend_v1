/**response type  to represent an account */
export type AccountResponseParams = {
    /**unique id generated by server */
    id: string;
    /**unique username provided by the account holder */
    username: string;
    /**link to the profile picture */
    profilePictureUri: string;
    /**fullname of the account holder */
    fullname?: string;
    /**true if new unseen memories are available */
    hasNewMemories?: boolean;
    /**true if the requesting account follows the author */
    isFollowing?: boolean;
    /**true if the target account follows this account */
    isFollower?: boolean;
    /**holds additional information about the following user's personalisation */
    followingInfo?: {
        /**true if the requesting account has added this author to favourite */
        isFavourite: boolean;
        isMuted: {
            /**true if memories has been muted */
            memory: boolean;
            /**true if posts has been muted */
            post: boolean;
        };
    };
    /**true if the target account has sent a follow request to this account*/
    hasRequested?: boolean;
    // /**a text message that states why the account is suggested */
    // suggestionText?: string;
    /**total number of followers of this account */
    noOfFollowers?: number;
    /**total number of posts uploaded from this account */
    noOfPosts?: number;
    /**uris of the most recent post thumbnails */
    topPosts?: string[];
    /**type of account  */
    type?: "public" | "private";
};

/**type to represent comment replies from posts */
export type ReplyResponseParams = {
    /**unique id generated by server */
    id: string;
    /**text content */
    content: string;
    /**upload timestamp of the reply */
    timestamp: number;
    /**account, that uploaded the reply */
    author: AccountResponseParams;
    /**total number of likes in the reply */
    noOfLikes: number;
    /**true if the requesting account liked the reply */
    isLiked: boolean;
};

/**type to represent comments of posts */
export type CommentResponseParams = {
    /**reply information about the comment*/
    replies: {
        /**total number of replies in the comment */
        noOfReplies: number;
        /**a reply of this comment requested by the requesting account */
        requestedReply?: ReplyResponseParams;
    };
    /**true if the author of the post has pinned the comment */
    isPinned: boolean;
} & ReplyResponseParams;

/**type that represents a photo*/
export type PhotoResponseParams = {
    /**uri link of the photo */
    uri: string;
    previewUri: string;
    /**aspect ratio of the original and its preview */
    aspectRatio: number;
};

/**type that represents a video */
export type VideoResponseParams = {
    /**duration of the video in milliseconds */
    duration: number;
    /**true if no audio stream is available in the video */
    isMuted: boolean;
} & PhotoResponseParams;

/**type to represent an audio */
export type AudioResponseParams = {
    /**unique id generated by server */
    id: string;
    /**title of the audio provided by the artist */
    title: string;
    /**name of the artist */
    artistName: string;
    /**account information of the artist if available */
    artistAccount?: AccountResponseParams;
    /**uri of the poster of the audio */
    posterUri: string;
    /**uri to play the audio */
    mediaUri?: string;
    /**link to the audio page */
    link?: string;
    /**duration of the audio */
    duration?: number;
    /**section of the audio to play as preview */
    previewSection?: {
        /**time to start the preview from */
        from: number;
        /**time to stop the preview */
        to: number;
    };
    /**total number of photos and videos created with this audio */
    noOfPhotosAndMoments?: number;
    /**true if the audio is added to favourite by the requesting account */
    isSaved?: boolean;
};

export type MediaType = "Photo" | "Video";

/**
 * type definition to represent a post
 */
export type PostResponseParams = {
    /**unique id generated by server */
    id: string;
    /**media data in this post */
    type: MediaType;
    /**upload timestamp of the post */
    timestamp: number;
    /**true if the post is edited  by the author*/
    isEdited: boolean;
    /**account that uploaded the post */
    author: AccountResponseParams;
    /**name of the location added to the post */
    location?: string;
    /**caption text added to the post */
    caption?: string;
    /**true if the requesting account has saved the post */
    isSaved: boolean;
    /**true if the requesting account has liked the post */
    isLiked: boolean;
    /**true if the author has pinned the post to account grids */
    isPinned: boolean;
    /**advanced options related to post metadata */
    advancedOptions: {
        /**true if comments is disabled on this post */
        commentsDisabled: boolean;
        /**true if number of likes and views are hidden for this post */
        hideLikesAndViewsCount: boolean;
        /**true if this post cannot be shared to memories */
        shareToMemoryDisabled: boolean;
        /**true if link sharing of this post is disabled */
        shareLinkDisabled: boolean;
    };
    /**metadata about the likes and views of the post */
    likesAndViews?: {
        /**total no of likes in the post */
        noOfLikes: number;
        /**total no of views in the post, only available to video posts */
        noOfViews: number;
        /**likes from following accounts */
        likesFromFollowingAccounts?: {
            /**total number of likes from following accounts */
            noOfLikes: number;
            /**couple of account informations */
            topAccounts: AccountResponseParams[];
        };
    };
    /**metadata about the comments on this post */
    comments?: {
        /**total number of comments in the post */
        noOfComments: number;
        /**couple of recent comments */
        topComments: CommentResponseParams[];
    };
    /**video data of the post, if available */
    video?: {
        /**true if the video is a moment */
        isMoment: boolean;
        momentRelatedInfo?: {
            /**information about the orginal remixed post */
            remixedWith?: {
                /**id of the original post */
                id: string;
                /**username of the author of the original post */
                username: string;
            };
            /**true if this video can be remixed, always false in case its a remixed video */
            remixEnabled: boolean;
            /**length of each clips added to the video in case its a template*/
            clipLengths?: number[];
        };
    } & VideoResponseParams;
    /**photo data of the post, if available */
    photos?: ({
        /**account mentions sticked to the photo */
        stickyMentions?: {
            /**username of the mentioned account */
            username: string;
            /**co-ordinates of the mention in percentage relative to the photo */
            coord: {
                /**x co-ordinates */
                x: string;
                /**y co-ordinates */
                y: string;
            };
        }[];
    } & PhotoResponseParams)[];
    /**audio related metadata used in the photo or video */
    audioRelatedInfo?: {
        /**audio section used */
        usedSection: {
            /**statrting timestamp */
            from: number;
            /**stoping timestamp */
            to: number;
        };
        audio?: AudioResponseParams;
    };
};

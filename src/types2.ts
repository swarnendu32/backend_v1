/**----------------------------------------------------UTILITY TYPE DEFINITIONS------------------------------------- */
export type FollowStatus = "following" | "requested" | "none";

export type ContentType = "photo" | "video";

export type AccountSuggestionType = "new" | "nearby" | "popular" | "foryou";
/**type that represents a photo*/
export type PhotoResponseParams = {
  /**uri link of the photo */
  uri: string;
  previewUri: string;
  /**aspect ratio of the original and its preview */
  aspectRatio: number;
};

/**type that represents a video */
export type VideoResponseParams = {
  /**duration of the video in milliseconds */
  duration: number;
  /**true if no audio stream is available in the video */
  isMuted: boolean;
} & PhotoResponseParams;

/**----------------------------------------------------ENTITY TYPE DEFINITIONS-------------------------------------- */

/**usefull when only readonly data is needed e.g search result */
export type AccountShortResponseParams = {
  /**unique id generated by server */
  id: string;
  /**unique username provided by the account holder */
  username: string;
  /**link to the profile picture */
  profilePictureUri: string;
  /**fullname of the account holder */
  fullname: string;
};

/**generic type to represent hashtag and location response */
export type HashTagAndLocationResponseParams = {
  /**name of the hashtag or location */
  name: string;
  /**number of posts created using this location or hashtag */
  noOfPosts: number;
};

export type AudioShortResponseParams = {
  /**unique id generated by server */
  id: string;
  /**title of the audio provided by the artist */
  title: string;
  /**name of the artist */
  artistName: string;
  /**uri of the poster of the audio */
  posterUri: string;
};

/**type to represent an audio */
export type AudioResponseParams = {
  /**uri to play the audio */
  mediaUri: string;
  /**duration of the audio */
  duration: number;
  /**section of the audio to play as preview */
  previewSection: {
    /**time to start the preview from */
    from: number;
    /**time to stop the preview */
    to: number;
  };
  /**total number of photos and videos created with this audio */
  noOfPhotosAndMoments: number;
  /**true if the audio is added to favourite by the requesting account */
  isSaved: boolean;
} & AudioShortResponseParams;

export type MemoryResponseParams = {
  /**unique id of the memory */
  id: string;
  /**created timestamp*/
  timestamp: number;
  /**orginal video data*/
  video: VideoResponseParams;
  /**audio related metadata used in the video */
  audio?: {
    usedSection: {
      /**statrting timestamp */
      from: number;
      /**stoping timestamp */
      to: number;
    };
  } & (({ isAvailable: true } & AudioResponseParams) | { isAvailable: false });
  hasSeen: boolean;
};

/**response type  to represent an account */
export type AccountResponseParams = {
  /**total number of followers of this account */
  noOfFollowers: number;
  /**total number of posts uploaded from this account */
  noOfPosts: number;
  /**true if the account is private */
  isPrivate: boolean;
  /**memory details */
  memoryInfo: {
    /**toatl number of memories uploaded in last 24 hours */
    noOfAvailableMemories: number;
    /**true if any of the memories uploaded in last 24 hours is unseen by the requesting account */
    hasUnseenMemories: boolean;
    /**all the memories uploaded in last 24 hours */
    memories?: MemoryResponseParams[];
    posterUri?: string;
  };
  mediaUris: string[];
} & (
  | {
      isActiveAccount: false;

      followingStatus: FollowStatus;
      /**true if the  target account follows the requesting account*/
      followerStatus: FollowStatus;
      /**holds additional information about the following user's personalisation */
      followingInfo: {
        /**true if the requesting account has added the target account to favourite */
        isFavourite: boolean;
        muteStatus: {
          /**true if memories has been muted */
          memory: boolean;
          /**true if posts has been muted */
          post: boolean;
        };
      };
    }
  | { isActiveAccount: true }
);

/**type to represent comment replies from posts */
export type ReplyResponseParams = {
  /**unique id generated by server */
  id: string;
  /**text content */
  content: string;
  /**upload timestamp of the reply */
  timestamp: number;
  /**account, that uploaded the reply
   * include following optional params - memoryInfo
   */
  author: AccountResponseParams;
  /**total number of likes in the reply */
  noOfLikes: number;
  /**true if the requesting account liked the reply */
  isLiked: boolean;
};

/**type to represent comments of posts */
export type CommentResponseParams = {
  /**total number of replies in the comment */
  noOfReplies: number;
  /**a reply of this comment requested by the requesting account */
  requestedReply?: ReplyResponseParams;
  /**true if the author of the post has pinned the comment */
  isPinned: boolean;
} & ReplyResponseParams;

export type PostResponseParams = {
  /**unique id generated by server */
  id: string;
  /**upload timestamp of the post */
  timestamp: number;
  /**true if the post is edited  by the author*/
  isEdited: boolean;
  /**account that uploaded the post
   * include following optional paramaters - memoryInfo, followingInfo, isPrivate, hasRequested, isFollowing
   */
  author: AccountResponseParams;
  /**name of the location added to the post */
  location?: string;
  /**caption text added to the post */
  caption?: string;
  /**true if the requesting account has saved the post */
  isSaved: boolean;
  /**true if the requesting account has liked the post */
  isLiked: boolean;
  /**advanced options related to post metadata that is only mutable by author */
  advancedOptions: {
    /**true if the author has pinned the post to account grids */
    isPinned: boolean;
    /**true if this post cannot be shared to memories */
    shareToMemoryDisabled: boolean;
    /**true if link sharing of this post is disabled */
    shareLinkDisabled: boolean;
  };
  /**metadata about the likes and views of the post */
  likesAndViews:
    | {
        /**true if number of likes and views are hidden for this post */
        hideLikesAndViewsCount: false;
        /**total no of likes in the post */
        noOfLikes: number;
        /**total no of views in the post, only available to video posts */
        noOfViews: number;
        /**couple of account informations
         * only include required params
         */
        likesFromFollowingAccounts?: {
          count: number;
          account: AccountShortResponseParams;
        };
      }
    | { hideLikesAndViewsCount: true };
  /**metadata about the comments on this post */
  comments:
    | {
        /**true if comments is disabled on this post */
        commentsDisabled: false;
        /**total number of comments in the post */
        noOfComments: number;
        /**couple of recent comments */
        topComments: CommentResponseParams[];
      }
    | { commentsDisabled: true };

  /**audio related metadata used in the video */
  audio?: {
    usedSection: {
      /**statrting timestamp */
      from: number;
      /**stoping timestamp */
      to: number;
    };
  } & (({ isAvailable: true } & AudioResponseParams) | { isAvailable: false });
  /**mentions in the posts
   * include following params - fullname, memoryInfo, isFollowing
   */
  mentions?: AccountResponseParams[];
  /**video data of the post, if available */
} & (
  | {
      contentType: "photo" /**photo data of the post, if available */;
      photos: {
        stickyMentions?: {
          id: string;
          x: number;
          y: number;
        }[];
      } & PhotoResponseParams[];
    }
  | {
      contentType: "video";
      video: VideoResponseParams &
        (
          | {
              isMoment: true;
              remixEnabled: boolean;
              remixedWith?: {
                /**id of the original post */
                postId: string;
                /**username of the author of the original post */
                username: string;
              };
            }
          | { isMoment: false }
        );
    }
);

export type ErrorParams = {
  code: string;
  message: string;
  reason: string;
  timestamp: number;
};

export type PayloadParams<T extends {}> = {
  /**desired payload data */
  data: T;
  /**payload generation timestamp */
  timestamp: number;
};

export type DataBaseQueryResponseParams<
  T extends {} | undefined = undefined,
  U extends {} = {}
> = {
  meta: U;
} & (
  | { isSuccess: true; payload: T }
  | { isSuccess: false; error: ErrorParams }
);

export type ResponseMetaParams<
  T extends {} | undefined = undefined,
  U extends {} | undefined = undefined
> = {
  /**request url */
  url: string;
  /**request timestamp*/
  timestamp: number;
  /**query params in the request*/
  params: T;
  /**request body parameters */
  body: U;
};

export type SuccessResponseParams<
  T extends PayloadParams<{}> | undefined = undefined,
  U extends {} | undefined = undefined,
  V extends {} | undefined = undefined
> = {
  payload: T;
  meta: ResponseMetaParams<U, V>;
};

export type FailureResponseParams<
  T extends {} | undefined = undefined,
  U extends {} | undefined = undefined
> = {
  error: ErrorParams;
  meta: ResponseMetaParams<T, U>;
};
